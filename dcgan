#!/usr/bin/env python3

import deep_mouse
import frames_pb2
import pb_io
import pb_analysis

if False:
    arcs = pb_io.load_pb2(frames_pb2.Arcs(), "data/arcs.pb")

    arcs = pb_analysis.get_interesting_arcs(arcs)
    arcs = pb_io.center_arcs(arcs)
    arcs = pb_io.unsign_arcs(arcs)

    print("input arc")
    i = 0
    for arc in arcs.arcs:
        i += 1
        if i > 16:
            break
        print(" arc")
        for pos in arc.positions:
            print("  {},{},{}", pos.time, pos.x, pos.y)

    darcs = pb_io.arcs_abs_to_delta(arcs)

    new_arcs = frames_pb2.Arcs()
    for i in range(16):
        new_arcs.arcs.append(darcs.arcs[i])
    darcs = new_arcs

    print("input darc")
    for arc in darcs.arcs:
        print(" arc")
        for pos in arc.positions:
            print("  {},{},{}", pos.time, pos.sx, pos.sy)

    train_images = pb_io.darcs_to_array(darcs)

    print("training data")
    for img in train_images:
        print(" {}".format(img))

    min_dx = -1
    max_dx = 2
    min_dy = 0
    max_dy = 14
    framerate = 60
    darcs2 = pb_io.array_to_darcs(train_images, min_dx, max_dx, min_dy, max_dy,
            framerate)

    print("output darc")
    for arc in darcs2.arcs:
        print(" arc")
        for pos in arc.positions:
            print("  {},{},{}", pos.time, pos.sx, pos.sy)

if True:
    arcs = pb_io.load_pb2(frames_pb2.Arcs(), "data/arcs.pb")
    deep_mouse.train_arcs(arcs)

if True:
    arcs = deep_mouse.gen_arcs(4096)
    pb_io.save_pb2(arcs, "data/deep_arcs.pb")
